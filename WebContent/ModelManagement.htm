<!DOCTYPE html>
<html>
	<link rel="stylesheet" href="styles/jqx.base.css" type="text/css" />
	<link rel="stylesheet" href="styles/model.css" type="text/css" />
	
	<script src="js/jquery-2.1.4.min.js"></script>
	<script src="js/jqx/jqxcore.js"></script>
	<script src="js/jqx/jqxbuttons.js"></script>
	<script src="js/jqx/jqxmenu.js"></script>
	<script src="js/jqx/jqxlistbox.js"></script>
	<script src="js/jqx/jqxdropdownlist.js"></script>
	<script src="js/jqx/jqxgrid.js"></script>
	<script src="js/jqx/jqxgrid.columnsreorder.js"></script>
	<script src="js/jqx/jqxgrid.columnsresize.js"></script>
	<script src="js/jqx/jqxgrid.filter.js"></script>
	<script src="js/jqx/jqxgrid.pager.js"></script>
	<script src="js/jqx/jqxgrid.edit.js"></script>
	<script src="js/jqx/jqxgrid.selection.js"></script>
	<script src="js/jqx/jqxgrid.sort.js"></script>
	<script src="js/jqx/jqxdata.js"></script>
	<script src="js/jqx/jqxscrollbar.js"></script>
	<script src="js/jqx/jqxcheckbox.js"></script>
	<script src="js/jqx/jqxinput.js"></script>
	<script src="js/jqx/jqxpanel.js"></script>
	<script src="js/jqx/jqxwindow.js"></script>
	<script src="js/jqx/jqxdocking.js"></script>
	<script src="js/jqx/jqxsplitter.js"></script>
	<script src="js/jqx/jqxtabs.js"></script>
<head>
	<meta charset="ISO-8859-1">
	<title>CSCSP Model Management</title>
</head>
<body bgcolor="#99CCFF">
	&nbsp<a href="http://localhost:8080/CSCSPMonitor/">Home</a>
	<br/>
	<table border=0>
		<tr>
			<td colspan=2>
				<input id='jqxbuttonSearch' type="button" value="Search / Refresh" />
				<input id="jqxinputQuery" type="text" />
			</td>
		</tr>
		<tr>
			<td colspan=2>
				<div id="jqxgrid" />
			</td>
		</tr>
		<tr>
			<td>
			
			</td>
			<td>
				<input id="jqxbuttonClearStatus" type="button" value="Clear Status Window" />
			</td>
		</tr>
		<tr>
			<td width=1040 valign="top">
				<div id="jqxdocking">
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
				</div>
			</td>
			<td valign="top">
				<div id="jqxpanelStatus" style=" font-size: 13px; font-family: Verdana;"></div>
			</td>
		</tr>
	</table>
	

	<script>
		$(document).ready(function () {
		    // First Load
		    var firstLoad = true;
		    if (firstLoad) {
		    	firstLoad = true;
		    	notifyTradingServlet();
		    }
			
			// jqxgrid
			var source =
		    {
				datatype: "json",
		    	method: "POST",	        
		        url: "http://localhost:8080/CSCSPMonitor/ModelServlet"
		    };
		    
		    var dataAdapter = new $.jqx.dataAdapter(source, {
		    	autoBind: true,
		    	formatData: function (data) {
		    		$.extend(data, {
		    			whereClause: $("#jqxinputQuery").val()
		    		});
		    		return data;
		    	},
		    	downloadComplete: function (data) {
		    		var columns = data[0].columns;
		    		var rows = data[1].rows;
		    		
		    		for (var a = 0; a < columns.length; a++) {
		    			columns[a]["cellsrenderer"] = cellsrenderer;
		    		}
		    		
		    		var gridAdapter = new $.jqx.dataAdapter({
		    			id: "id",
		    			localdata: rows
		    		});
		    		$("#jqxgrid").jqxGrid('hideloadelement');
		    		$("#jqxgrid").jqxGrid('beginupdate', true);
		    		$("#jqxgrid").jqxGrid({
		    			source: gridAdapter,
		    			columns: columns,
		    		});
		    		$("#jqxgrid").jqxGrid('endupdate');
		    	}
		    });
		    
		    var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {
		    	var floatColumns = ["trainTruePositiveRate", "trainFalsePositiveRate", "trainWinPercent", "trainROCArea", 
		    	                    "testNumOpportunities", "testOppPercent", "testOppositeNumOpportunities", "testTruePositiveRate", "testFalsePositiveRate", 
		    	                    "testWinPercent", "tradeWinPercent", "tradePercent", "testOppositeWinPercent", "testEstimatedAverageReturn", "testOppositeEstimatedAverageReturn", "testROCArea", "testReturnPower", "testOppositeReturnPower"]
		    	floatColumns["testTruePositiveRate"] = .05;
		    	floatColumns["testWinPercent"] = .6;
		    	floatColumns["tradeWinPercent"] = .65;
		    	floatColumns["tradePercent"] = .25;
		    	floatColumns["testOppositeWinPercent"] = .6;
		    	floatColumns["testEstimatedAverageReturn"] = .005;
		    	floatColumns["testOppositeEstimatedAverageReturn"] = .005;
		    	floatColumns["testROCArea"] = .6;
		    	floatColumns["testReturnPower"] = 50;
		    	floatColumns["testOppositeReturnPower"] = 50;
		    	floatColumns["testOppPercent"] = .50;
		    	floatColumns["testNumOpportunities"] = 100;
		    	floatColumns["testOppositeNumOpportunities"] = 100;
		    	if ($.inArray(columnfield, floatColumns) != -1) {	
		    		if (value < floatColumns[columnfield]) {
		    			var color = '; color: #ff0000;">';
		    			if (columnfield === "testFalsePositiveRate") {
		    				color = '; color: #000000;">';
		    			}
		                return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + color + Math.round(value * 1000) / 1000 + '</span>';
		            }
		            else {
		            	var color = '; color: #008000;">';
		    			if (columnfield === "testFalsePositiveRate") {
		    				color = '; color: #000000;">';
		    			}
		                return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + color + Math.round(value * 1000) / 1000 + '</span>';
		            }
		    	}
		    }
		    
		    // jqxgrid
		    $("#jqxgrid").jqxGrid(
		    {
		    	source: dataAdapter,
		        width: 1400,
		        altrows: true,
		        autoheight: true,
		        editable: true,
		        selectionmode: 'checkbox',
		        columnsresize: true,
		        rowsheight: 20,
		        pageable: true,
		        pagesizeoptions: ['20', '50', '100', '1000'],
		        pagesize: 20,
		        sortable: true
		    });
		    $("#jqxgrid").jqxGrid('showloadelement');

		    // Events
		    $("#jqxgrid").on('bindingcomplete', function (event) {
		    	$("#jqxgrid").jqxGrid('hideloadelement');
		    });
		    $("#jqxgrid").on('cellendedit', function (event) {
		    	updateModel(event);
            });
		    $('#jqxgrid').on('rowselect', function (event) {
		    	notifyTradingServlet();
		    	if (typeof event.args.rowindex.length !== "undefined" && event.args.rowindex.length === 0) {
		    		removeDock(event);
		    	}
		    	else {
		    		addDock(event);
		   	 	}
            });
		    $('#jqxgrid').on('rowunselect', function (event) {
		    	notifyTradingServlet();
		    	removeDock(event);
            });
		    function notifyTradingServlet() {
		    	var symbols = [];
    	    	var durations = [];
    	    	var metrics = [];
    	    	var modelfiles = [];
    	    	
    	    	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
    	    	if (typeof gridRowIndexes !== "undefined") {
    		    	for (var a = 0; a < gridRowIndexes.length; a++) {
    		    		var rowData = $("#jqxgrid").jqxGrid('getrowdata', gridRowIndexes[a]);
    		    		symbols[a] = rowData.symbol;
    		    		durations[a] = rowData.duration;
    		    		metrics[a] = rowData.metrics;
    		    		modelfiles[a] = rowData.modelFile;
    		    	}
    	    	}
    		    	
   		    	$.ajax({
   		    		dataType: 'json',
   		    		url: 'TradingServlet',
   		    		method: 'POST',
   		    		data: {
   		    			symbols : symbols,
   		    			durations : durations,
   		    			metrics : metrics,
   		    			modelfiles : modelfiles
   		    		},
   		    		success: function (data) {
   		   				
   		    		}
   		    	});
		    }
		    function addDock(event) {
		    	if (typeof event.args.rowindex.length === "undefined") {
		    		addDockForRow(event.args.rowindex);
		    	}
		    	else {
		    		for (var ri = 0; ri < event.args.rowindex.length; ri++) {
		    			addDockForRow(ri);
		    		}
		    	}
		    }
		    function addDockForRow(row) {
		    	var col = numDocks % 4
		    	numDocks++;
		    	var model = $('#jqxgrid').jqxGrid('getrowdata', row).modelFile;
		    	model = model.replace(".model", "");
		    	$($('#jqxdocking').children()[col]).append(
		    		"<div id='" + model + "'>" +
		    		"<div id='" + model + "Header'>	<div style='float:left; align:left; font-size:70%;' id='" + model + "LeftHeader'>Loading...</div>	<div style='float:right; align:right; font-size:70%; padding-right:15px;' 	id='" + model + "RightHeader'></div></div>" +
		    		"<div id='" + model + "Body' class='dock'>" +	
		    			"<div class='bar'			id='" + model + "Bar'>" +
		    				"<img src='images/Bar.png' height='20' width='246'>" +
		    			"</div>" +
		    			"<div class='pointer'		id='" + model + "Pointer'>" +
		    			"</div>" +
		    			"<div class='buckets'		id='" + model + "Buckets'>" +
		    			"</div>" +
		    			"<div class='data'			id='" + model + "Data'>" +
		    			"</div>" +
		    			"<div						id='" + model + "Image'>" +
		    			"</div>" +
		    			"<div						id='" + model + "ImageBackground'>" +
		    			"</div>" +
		    		"</div>" +
		    		"</div>"); 
		    	$('#jqxdocking').jqxDocking('addWindow', model, 'docked', col, Math.floor(numDocks / 4));
		    	//$('#jqxdocking').jqxDocking('hideAllCloseButtons');
		    }
		    function removeDock(event) {
		    	if (typeof event.args.rowindex.length === "undefined") {
		    		removeDockForRow(event.args.rowindex);
		    	}
		    	else {
		    		
		    		for (var ri = 0; ri < $('#jqxgrid').jqxGrid('getrows').length; ri++) {
		    			removeDockForRow(ri);
		    		}
		    	}
		    }
		    function removeDockForRow(row) {
		    	var model = $('#jqxgrid').jqxGrid('getrowdata', row).modelFile;
		    	model = model.replace(".model", "");
		    	
		    	try {
		    		$(eval(model));
		    		numDocks--;
			    	$('#jqxdocking').jqxDocking('closeWindow', model, 'docked');
			    	$(eval(model)).remove();
		    	}
		    	catch (err) {}
		    }
		    function updateModel(event) {
		    	$.ajax({
   		    		dataType: 'json',
   		    		url: 'ModelUpdateServlet',
   		    		method: 'POST',
   		    		data: {
   		    			modelID : $('#jqxgrid').jqxGrid('getrowdata', event.args.rowindex).id,
   		    			column : event.args.datafield,
   		    			checked : event.args.value
   		    		}
   		    	});
		    }
		    
			// jqxbuttonSearch   
			$("#jqxbuttonSearch").jqxButton({ width: '200'});
		    $("#jqxbuttonSearch").on('click', function () {
		    	dataAdapter.dataBind();
		    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	$("#jqxgrid").jqxGrid('showloadelement');
		    	notifyTradingServlet();
	        });
		    
		   	// jqxinputQuery
		    $("#jqxinputQuery").jqxInput({placeHolder: "SQL models WHERE clause", height: 22, width: 1196, minLength: 1 });
		    $('#jqxinputQuery').val("WHERE favorite = true AND id > 19322");
		   	$('#jqxinputQuery').bind('keyup', function (e) { 
	    		if (e.keyCode === 13) {
	    			dataAdapter.dataBind();
	    	    	$("#jqxgrid").jqxGrid('updatebounddata');
	    	    	$("#jqxgrid").jqxGrid('showloadelement');
	    		}
	    	}); 
		
			// jqxpanelStatus
		    $("#jqxpanelStatus").jqxPanel({ width: 356, height: 400});
			
		 	// Start polling for status
		    var interval = 1000;
		    function pollForStatus() {
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'StatusServlet',
		    		method: 'POST',
		    		data: {
		    			type : 'trading'
		    		},
		    		success: function (data) {
		    			for (var a = 0; a < data.length; a++) {
		    				if (Object.size($.parseJSON(data[a])) === 1) { // Regular text message
		    					var date = new Date();
			   					$("#jqxpanelStatus").jqxPanel('prepend', "<div>" + date.toLocaleTimeString() + " - " + $.parseJSON(data[a]).Status + "</div>");
		    				}
		    				else { // Get fielded JSON messages
				    			var jsonMessages = $.parseJSON(data[a]);
		    					if (typeof jsonMessages !== "undefined") {
					    			var model = jsonMessages.Model;
					    			var action = jsonMessages.Action;
					    			var time = jsonMessages.Time;
					    			var secondsRemaining = jsonMessages.SecondsRemaining;
					    			var testWinPercentage = jsonMessages.TestWinPercentage;
					    			var testOppositeWinPercentage = jsonMessages.TestOppositeWinPercentage;
					    			var testEstimatedAverageReturn = jsonMessages.TestEstimatedAverageReturn;
					    			var testOppositeEstimatedAverageReturn = jsonMessages.TestOppositeEstimatedAverageReturn;
					    			var testReturnPower = jsonMessages.TestReturnPower;
					    			var testOppositeReturnPower = jsonMessages.TestOppositeReturnPower;
					    			var modelType = jsonMessages.Type;
					    			var tradeOffPrimary = jsonMessages.TradeOffPrimary;
					    			var tradeOffOpposite = jsonMessages.TradeOffOpposite;
					    			var duration = jsonMessages.Duration;
					    			var symbol = jsonMessages.Symbol;
					    			var price = jsonMessages.Price;
					    			var priceDelay = jsonMessages.PriceDelay;
					    			var lastAction = jsonMessages.LastAction;
					    			var lastActionTime = jsonMessages.LastActionTime;
					    			var lastActionPrice = jsonMessages.LastActionPrice;
					    			var lastTargetClose = jsonMessages.LastTargetClose;
					    			var lastStopClose = jsonMessages.LastStopClose;
					    			var winningPercentage = jsonMessages.WinningPercentage;
					    			var averageWinningPercentage = jsonMessages.AverageWinningPercentage;
					    			var averageLast500AWPs = jsonMessages.AverageLast500AWPs;
					    			var testBucketPercentCorrect = $.parseJSON(jsonMessages.TestBucketPercentCorrect).TestBucketPercentCorrect;
					    			var testBucketDistribution = $.parseJSON(jsonMessages.TestBucketDistribution).TestBucketDistribution;
					    			var confidence = jsonMessages.Confidence;
					    			if (action === "Sell" || action === "Sell Signal") {
					    				confidence = parseFloat((1 - confidence).toFixed(5));
					    			} 
					    			var confidenceSize = (winningPercentage - .5) * 200;
					    			if (confidenceSize > 44) confidenceSize = 44;
					    			if (confidenceSize < 5) confidenceSize = 5;
					    			
				   					// Update status panel
				   					var statusPanelContent = $('#panelContentjqxpanelStatus');
				   					if (typeof statusPanelContent !== "undefined") {
				   						if (statusPanelContent.children().size() > 1000) {
				   							statusPanelContent.children().last().remove();
				   						}
				   					}
				   					
				   					var date = new Date();
				   					if (action !== "" && action !== "Waiting" && action !== "None" && action !== "Sell Signal" && action !== "Buy Signal") {
				   						$("#jqxpanelStatus").jqxPanel('prepend', "<div>" + date.toLocaleTimeString() + " - " + action + " (" + model + ")</div>");
				   					}
				   					else {
				   						if (typeof averageWinningPercentage !== "undefined" && action !== "Waiting") {
				   							$("#jqxpanelStatus").jqxPanel('prepend', "<div>" + date.toLocaleTimeString() + " - Current AWP: " + averageWinningPercentage + ", " + averageLast500AWPs + ")</div>");
				   						}
				   					}
				   					
				   					// Update docks
				   					if (model !== "" && typeof model !== "undefined") {
				   						model = model.replace(".model", "");
				   						var $modelHeaderDiv;
				   						var $modelHeaderLeftDiv;
				   						var $modelHeaderRightDiv;
				   						var $modelBarDiv;
				   						var $modelPointerDiv;
				   						var $modelBucketsDiv;
				   						var $modelDataDiv
				   						var $modelImageDiv;
				   						var $modelImageBackgroundDiv;
				   						try {
				   							$modelHeaderDiv = $(eval(model + "Header"));
				   							$modelHeaderLeftDiv = $(eval(model + "LeftHeader"));
				   							$modelHeaderRightDiv = $(eval(model + "RightHeader"));
				   							$modelBarDiv = $(eval(model + "Bar"));
				   							$modelPointerDiv = $(eval(model + "Pointer"));
				   							$modelBucketsDiv = $(eval(model + "Buckets"));
				   							$modelDataDiv = $(eval(model + "Data"));
				   							$modelImageDiv = $(eval(model + "Image"));
				   							$modelImageBackgroundDiv = $(eval(model + "ImageBackground"));
				   						}
				   						catch (err) {
				   							$modelHeaderDiv = [];
				   							$modelHeaderLeftDiv = [];
				   							$modelHeaderRightDiv = [];
				   							$modelPointerDiv = [];
				   							$modelBarDiv = [];
				   							$modelBucketsDiv = [];
				   							$modelDataDiv = [];
				   							$modelImageDiv = [];
				   							$modelImageBackgroundDiv = [];
				   						}
				   						
				   						if ($modelImageDiv.length) {
				   							$modelHeaderDiv.css({"color":"green"});
				 
				   							$modelBucketsDiv.empty();
				   							$modelPointerDiv.empty();
				   							$modelDataDiv.empty();
				   							$modelImageDiv.empty();
				   							
				   							// Pointer
				   							if ($modelPointerDiv.length) {
					   							$modelPointerDiv.append(
					   								$('<img />').attr({
						   							   	'src': 'images/Pointer.png',
						   								'height': 13,
						   								'width': 9
					   								})
					   							);
					   							$modelPointerDiv.css({"position": "absolute"});
					   							$modelPointerDiv.css({"z-index": 1000});
					   							$modelPointerDiv.css({"top": 15});
					   							$modelPointerDiv.css({"left":(confidence * 241)});
					   						}
				   							
				   							// Buckets
				   							var imagePath = "images/None.png";
				   							for (var b = 0; b < 10; b++) {
				   								var size = 16;
				   								var imageFile;
				   								if (b < 5) {
				   									if (testBucketPercentCorrect[b] > .5) {
				   										imageFile = 'images/Sell.png';
				   									}
				   									else {
				   										imageFile = 'images/Buy.png';
				   									}
				   								}
				   								else {
				   									if (testBucketPercentCorrect[b] < .5) {
				   										imageFile = 'images/Sell.png';
				   									}
				   									else {
				   										imageFile = 'images/Buy.png';
				   									}
				   								}
				   								size = Math.abs((testBucketPercentCorrect[b] - .5)) * 60; // 0-30
				   								if (size < 4) {
				   									size = 4;
				   								}
				   								if (size > 20) {
				   									size = 20;
				   								}
				   								if (testBucketPercentCorrect[b] == 0) {
				   									size = 0;
				   								}
				   								
				   								if (Math.floor(confidence * 10) === b) {
				   									imagePath = imageFile;
				   								}
				   								
				   								var opacity = 1.0;
				   								if (testBucketDistribution[b] < .1) {
				   									opacity = testBucketDistribution[b] * 10;
				   								}
				   					
				   								var bucketDiv = $("<div id='" + model + "Bucket" + b + "' style='height: 20px; position: absolute; z-index: 1000; top: 22px; left: " + (14 - (size / 2) + (b * 24.1)) + "px; opacity: " + opacity + "'></div>");
				   								var imageDiv = $('<img />').attr({
									   							   	'src': imageFile,
									   								'height': size,
									   								'width': size,
									   								'opacity': opacity,
									   								'vertical-align': 'middle'
								   								});
				   								// Next 2 commented out lines: was trying to vertically align the arrows for each bucket so they're centered.  Never got it working.
				   								//var helperDiv = $("<span style='display: inline-block; height: 100%; vertical-align: 'middle' />");
				   						
				   								//bucketDiv.append(helperDiv);
				   								bucketDiv.append(imageDiv);
				   								$modelBucketsDiv.append(bucketDiv);
				   							}
				   							
				   							// Data
				   							$modelDataDiv.append("<br/><br/>Model Score: " + confidence);
				   							$modelDataDiv.append("<br/>Bin Accuracy: " + winningPercentage);
					   						$modelDataDiv.append("<br/>Waiting: " + secondsRemaining + "s");
					   						//$modelDataDiv.append("<br/>Delay: " + priceDelay + "s");
				   							
				   							// Image
				   							if (action === "Waiting") {
					   							imagePath = "images/Wait.png";
					   							confidenceSize = 44;
					   						}
				   							$modelImageDiv.css({"position": "absolute"});
				   							$modelImageDiv.css({"z-index": 1000});
				   							$modelImageDiv.css({"top": 67 - (confidenceSize / 2)});
				   							$modelImageDiv.css({"left": 229 - (confidenceSize / 2)});
				   							$modelImageDiv.css({"width": confidenceSize});
				   							$modelImageDiv.css({"height": confidenceSize});
				   							$modelImageDiv.css("background", "url(" + imagePath + ") no-repeat center center");
				   							$modelImageDiv.css({"background-repeat": "no-repeat"});
				   							$modelImageDiv.css({"background-size": "contain"});
				   							
				   							$modelImageBackgroundDiv.css({"position": "absolute"});
				   							$modelImageBackgroundDiv.css({"z-index": 999});
				   							$modelImageBackgroundDiv.css({"top": 45});
				   							$modelImageBackgroundDiv.css({"left": 207});
				   							$modelImageBackgroundDiv.css({"width": 38});
				   							$modelImageBackgroundDiv.css({"height": 38});
				   							$modelImageBackgroundDiv.css({"border-size": "1px"});
				   							$modelImageBackgroundDiv.css({"border-style": "solid"});
				   							$modelImageBackgroundDiv.css({"border-color": "#E8E8E8"});
				   							$modelImageBackgroundDiv.css({"background": "#EFEFEF"});
				   							
				   							// Header
				   							$modelHeaderLeftDiv.parent().css({"width":"100%"});
				   							$modelHeaderLeftDiv.text(model);
				   							$modelHeaderRightDiv.text(symbol + " " + duration);
				   						}
				   					}
		    					}
		    				}
		    			}
		   				
		    		},
		    		complete: function (data) {
						setTimeout(pollForStatus, interval);    			
		    		}
		    	});
			}
		    pollForStatus();
	
		 	// jqxbuttonClearStatus   
			$("#jqxbuttonClearStatus").jqxButton({ width: '200'});
		    $("#jqxbuttonClearStatus").on('click', function () {
		    	$("#jqxpanelStatus").jqxPanel('clearcontent');
	        });
		    
		    // jqxdocking
		 	$("#jqxdocking").jqxDocking({ orientation: 'horizontal', windowsOffset: 3, width: 1040, mode: 'docked' });
		    var numDocks = 0;
		});
		
		// Weirdo functions that help things
		if (typeof String.prototype.startsWith != 'function') {
	  		String.prototype.startsWith = function (str) {
	  			return this.indexOf(str) === 0;
		  	};
		}
		
		Object.size = function(obj) {
		    var size = 0, key;
		    for (key in obj) {
		        if (obj.hasOwnProperty(key)) size++;
		    }
		    return size;
		};
	</script>

</body>
</html>