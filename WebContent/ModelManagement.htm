<!DOCTYPE html>
<html>
	<link rel="stylesheet" href="styles/jqx.base.css" type="text/css" />
	<link rel="stylesheet" href="styles/model.css" type="text/css" />
	
	<script src="js/jquery-2.1.4.min.js"></script>
	<script src="js/jqx/jqxcore.js"></script>
	<script src="js/jqx/jqxbuttons.js"></script>
	<script src="js/jqx/jqxmenu.js"></script>
	<script src="js/jqx/jqxlistbox.js"></script>
	<script src="js/jqx/jqxdropdownlist.js"></script>
	<script src="js/jqx/jqxgrid.js"></script>
	<script src="js/jqx/jqxgrid.columnsreorder.js"></script>
	<script src="js/jqx/jqxgrid.columnsresize.js"></script>
	<script src="js/jqx/jqxgrid.filter.js"></script>
	<script src="js/jqx/jqxgrid.pager.js"></script>
	<script src="js/jqx/jqxgrid.edit.js"></script>
	<script src="js/jqx/jqxgrid.selection.js"></script>
	<script src="js/jqx/jqxgrid.sort.js"></script>
	<script src="js/jqx/jqxdata.js"></script>
	<script src="js/jqx/jqxscrollbar.js"></script>
	<script src="js/jqx/jqxcheckbox.js"></script>
	<script src="js/jqx/jqxinput.js"></script>
	<script src="js/jqx/jqxpanel.js"></script>
	<script src="js/jqx/jqxwindow.js"></script>
	<script src="js/jqx/jqxdocking.js"></script>
	<script src="js/jqx/jqxsplitter.js"></script>
	<script src="js/jqx/jqxtabs.js"></script>
<head>
	<meta charset="ISO-8859-1">
	<title>CSCSP Model Management</title>
</head>
<body bgcolor="#99CCFF">
	&nbsp<a href="http://localhost:8080/CSCSPMonitor/">Home</a>
	<br/>
	<table border=0>
		<tr>
			<td colspan=2>
				<input id='jqxbuttonSearch' type="button" value="Search / Refresh" />
				<input id="jqxinputQuery" type="text" />
			</td>
		</tr>
		<tr>
			<td colspan=2>
				<div id="jqxgrid" />
			</td>
		</tr>
		<tr>
			<td>
			
			</td>
			<td>
				<input id="jqxbuttonClearStatus" type="button" value="Clear Status Window" />
			</td>
		</tr>
		<tr>
			<td width=1040 valign="top">
				<div id="jqxdocking">
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
					<div style="width: 260px"></div>
				</div>
			</td>
			<td valign="top">
				<div id="jqxpanelStatus" style=" font-size: 13px; font-family: Verdana;"></div>
			</td>
		</tr>
	</table>
	

	<script>
		$(document).ready(function () {
		    // First Load
		    var firstLoad = true;
		    if (firstLoad) {
		    	firstLoad = true;
		    	notifyTradingServlet();
		    }
			
			// jqxgrid
			var source =
		    {
				datatype: "json",
		    	method: "POST",	        
		        url: "http://localhost:8080/CSCSPMonitor/ModelServlet"
		    };
		    
		    var dataAdapter = new $.jqx.dataAdapter(source, {
		    	autoBind: true,
		    	formatData: function (data) {
		    		$.extend(data, {
		    			whereClause: $("#jqxinputQuery").val()
		    		});
		    		return data;
		    	},
		    	downloadComplete: function (data) {
		    		var columns = data[0].columns;
		    		var rows = data[1].rows;
		    		
		    		for (var a = 0; a < columns.length; a++) {
		    			columns[a]["cellsrenderer"] = cellsrenderer;
		    		}
		    		
		    		var gridAdapter = new $.jqx.dataAdapter({
		    			id: "id",
		    			localdata: rows
		    		});
		    		$("#jqxgrid").jqxGrid('hideloadelement');
		    		$("#jqxgrid").jqxGrid('beginupdate', true);
		    		$("#jqxgrid").jqxGrid({
		    			source: gridAdapter,
		    			columns: columns,
		    		});
		    		$("#jqxgrid").jqxGrid('endupdate');
		    	}
		    });
		    
		    var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {
		    	var floatColumns = ["trainTruePositiveRate", "trainFalsePositiveRate", "trainWinPercent", "trainROCArea", 
		    	                    "testNumOpportunities", "testOppositeNumOpportunities", "testTruePositiveRate", "testFalsePositiveRate", 
		    	                    "testWinPercent", "testOppositeWinPercent", "testEstimatedAverageReturn", "testOppositeEstimatedAverageReturn", "testROCArea", "testReturnPower", "testOppositeReturnPower"]
		    	floatColumns["testTruePositiveRate"] = .05;
		    	floatColumns["testWinPercent"] = .6;
		    	floatColumns["testOppositeWinPercent"] = .6;
		    	floatColumns["testEstimatedAverageReturn"] = .005;
		    	floatColumns["testOppositeEstimatedAverageReturn"] = .005;
		    	floatColumns["testROCArea"] = .6;
		    	floatColumns["testReturnPower"] = 50;
		    	floatColumns["testOppositeReturnPower"] = 50;
		    	floatColumns["testNumOpportunities"] = 100;
		    	floatColumns["testOppositeNumOpportunities"] = 100;
		    	if ($.inArray(columnfield, floatColumns) != -1) {	
		    		if (value < floatColumns[columnfield]) {
		    			var color = '; color: #ff0000;">';
		    			if (columnfield === "testFalsePositiveRate") {
		    				color = '; color: #000000;">';
		    			}
		                return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + color + Math.round(value * 1000) / 1000 + '</span>';
		            }
		            else {
		            	var color = '; color: #008000;">';
		    			if (columnfield === "testFalsePositiveRate") {
		    				color = '; color: #000000;">';
		    			}
		                return '<span style="margin: 4px; float: ' + columnproperties.cellsalign + color + Math.round(value * 1000) / 1000 + '</span>';
		            }
		    	}
		    }
		    
		    // jqxgrid
		    $("#jqxgrid").jqxGrid(
		    {
		    	source: dataAdapter,
		        width: 1400,
		        altrows: true,
		        autoheight: true,
		        editable: true,
		        selectionmode: 'checkbox',
		        columnsresize: true,
		        rowsheight: 20,
		        pageable: true,
		        pagesizeoptions: ['20', '50', '100', '1000'],
		        pagesize: 20,
		        sortable: true
		    });
		    $("#jqxgrid").jqxGrid('showloadelement');

		    // Events
		    $("#jqxgrid").on('bindingcomplete', function (event) {
		    	$("#jqxgrid").jqxGrid('hideloadelement');
		    });
		    $("#jqxgrid").on('cellendedit', function (event) {
		    	updateModel(event);
            });
		    $('#jqxgrid').on('rowselect', function (event) {
		    	notifyTradingServlet();
		    	addDock(event);
            });
		    $('#jqxgrid').on('rowunselect', function (event) {
		    	notifyTradingServlet();
		    	removeDock(event);
		    });
		    function notifyTradingServlet() {
		    	var symbols = [];
    	    	var durations = [];
    	    	var metrics = [];
    	    	var modelfiles = [];
    	    	
    	    	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
    	    	if (typeof gridRowIndexes !== "undefined") {
    		    	for (var a = 0; a < gridRowIndexes.length; a++) {
    		    		var rowData = $("#jqxgrid").jqxGrid('getrowdata', gridRowIndexes[a]);
    		    		symbols[a] = rowData.symbol;
    		    		durations[a] = rowData.duration;
    		    		metrics[a] = rowData.metrics;
    		    		modelfiles[a] = rowData.modelFile;
    		    	}
    	    	}
    		    	
   		    	$.ajax({
   		    		dataType: 'json',
   		    		url: 'TradingServlet',
   		    		method: 'POST',
   		    		data: {
   		    			symbols : symbols,
   		    			durations : durations,
   		    			metrics : metrics,
   		    			modelfiles : modelfiles
   		    		},
   		    		success: function (data) {
   		   				
   		    		}
   		    	});
		    }
		    function addDock(event) {
		    	var col = numDocks % 4
		    	numDocks++;
		    	var model = $('#jqxgrid').jqxGrid('getrowdata', event.args.rowindex).modelFile;
		    	model = model.replace(".model", "");
		    	$($('#jqxdocking').children()[col]).append(
		    		"<div id='" + model + "'>" +
		    		"<div id='" + model + "Header'>	<div style='float:left; align:left; font-size:70%;' id='" + model + "LeftHeader'>Loading...</div>	<div style='float:right; align:right; font-size:70%; padding-right:15px;' 	id='" + model + "RightHeader'></div></div>" +
		    		"<div id='" + model + "Body' class='dock'>" +	
		    			"<div class='column-left' 	id='" + model + "Left'>" +
		    				"<div class='column-left-top' 	id='" + model + "LeftTop'></div>" +
		    				"<div class='column-bottom' 	id='" + model + "LeftBottom'></div>" +
		    			"</div>" +	
		    			"<div class='column-center' id='" + model + "Center'>" +
		    			"</div>" +
		    			"<div class='column-right' 	id='" + model + "Right'>" +
		    				"<div class='column-right-top' 	id='" + model + "RightTop'></div>" +
	    					"<div class='column-bottom' 	id='" + model + "RightBottom'></div>" +
		    			"</div>" +
		    		"</div>" +
		    		"</div>"); 
		    	$('#jqxdocking').jqxDocking('addWindow', model, 'docked', col, 0);
		    	//$('#jqxdocking').jqxDocking('hideAllCloseButtons');
		    	
		    }
		    function removeDock(event) {
		    	numDocks--;
		    	var model = $('#jqxgrid').jqxGrid('getrowdata', event.args.rowindex).modelFile;
		    	model = model.replace(".model", "");
		    	$('#jqxdocking').jqxDocking('closeWindow', model, 'docked');
		    	$(eval(model)).remove();
		    }
		    function updateModel(event) {
		    	$.ajax({
   		    		dataType: 'json',
   		    		url: 'ModelUpdateServlet',
   		    		method: 'POST',
   		    		data: {
   		    			modelID : $('#jqxgrid').jqxGrid('getrowdata', event.args.rowindex).id,
   		    			column : event.args.datafield,
   		    			checked : event.args.value
   		    		}
   		    	});
		    }
		    
			// jqxbuttonSearch   
			$("#jqxbuttonSearch").jqxButton({ width: '200'});
		    $("#jqxbuttonSearch").on('click', function () {
		    	dataAdapter.dataBind();
		    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	$("#jqxgrid").jqxGrid('showloadelement');
		    	notifyTradingServlet();
	        });
		    
		   	// jqxinputQuery
		    $("#jqxinputQuery").jqxInput({placeHolder: "SQL models WHERE clause", height: 22, width: 1196, minLength: 1 });
		    $('#jqxinputQuery').val("WHERE favorite = true");
		   	$('#jqxinputQuery').bind('keyup', function (e) { 
	    		if (e.keyCode === 13) {
	    			dataAdapter.dataBind();
	    	    	$("#jqxgrid").jqxGrid('updatebounddata');
	    	    	$("#jqxgrid").jqxGrid('showloadelement');
	    		}
	    	}); 
		
			// jqxpanelStatus
		    $("#jqxpanelStatus").jqxPanel({ width: 356, height: 400});
			
		 	// Start polling for status
		    var interval = 1000;
		    function pollForStatus() {
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'StatusServlet',
		    		method: 'POST',
		    		data: {
		    			type : 'trading'
		    		},
		    		success: function (data) {
		    			for (var a = 0; a < data.length; a++) {
		    				if (Object.size($.parseJSON(data[a])) === 1) { // Regular text message
		    					var date = new Date();
			   					$("#jqxpanelStatus").jqxPanel('prepend', "<div>" + date.toLocaleTimeString() + " - " + $.parseJSON(data[a]).Status + "</div>");
		    				}
		    				else { // Get fielded JSON messages
				    			var jsonMessages = $.parseJSON(data[a]);
				    			var model = jsonMessages.Model;
				    			var action = jsonMessages.Action;
				    			var time = jsonMessages.Time;
				    			var secondsRemaining = jsonMessages.SecondsRemaining;
				    			var testWinPercentage = jsonMessages.TestWinPercentage;
				    			var testOppositeWinPercentage = jsonMessages.TestOppositeWinPercentage;
				    			var testEstimatedAverageReturn = jsonMessages.TestEstimatedAverageReturn;
				    			var testOppositeEstimatedAverageReturn = jsonMessages.TestOppositeEstimatedAverageReturn;
				    			var testReturnPower = jsonMessages.TestReturnPower;
				    			var testOppositeReturnPower = jsonMessages.TestOppositeReturnPower;
				    			var modelType = jsonMessages.Type;
				    			var tradeOffPrimary = jsonMessages.TradeOffPrimary;
				    			var tradeOffOpposite = jsonMessages.TradeOffOpposite;
				    			var duration = jsonMessages.Duration;
				    			var symbol = jsonMessages.Symbol;
				    			var price = jsonMessages.Price;
				    			var priceDelay = jsonMessages.PriceDelay;
				    			var lastAction = jsonMessages.LastAction;
				    			var lastActionTime = jsonMessages.LastActionTime;
				    			var lastActionPrice = jsonMessages.LastActionPrice;
				    			var lastTargetClose = jsonMessages.LastTargetClose;
				    			var lastStopClose = jsonMessages.LastStopClose;
				    			
			   					// Update status panel
			   					var statusPanelContent = $('#panelContentjqxpanelStatus');
			   					if (typeof statusPanelContent !== "undefined") {
			   						if (statusPanelContent.children().size() > 1000) {
			   							statusPanelContent.children().last().remove();
			   						}
			   					}
			   					
			   					var date = new Date();
			   					if (action !== "" && action !== "Waiting" && action !== "None" && action !== "Sell Signal" && action !== "Buy Signal") {
			   						$("#jqxpanelStatus").jqxPanel('prepend', "<div>" + date.toLocaleTimeString() + " - " + action + " (" + model + ")</div>");
			   					}
			   					
			   					// Update docks
			   					if (model !== "" && typeof model !== "undefined") {
			   						model = model.replace(".model", "");
			   						var $modelHeaderDiv;
			   						var $modelHeaderLeftDiv;
			   						var $modelHeaderRightDiv;
			   						var $modelLeftTopDiv;
			   						var $modelLeftBottomDiv;
			   						var $modelCenterDiv;
			   						var $modelRightTopDiv;
			   						var $modelRightBottomDiv;
			   						try {
			   							$modelHeaderDiv = $(eval(model + "Header"));
			   							$modelHeaderLeftDiv = $(eval(model + "LeftHeader"));
			   							$modelHeaderRightDiv = $(eval(model + "RightHeader"));
			   							$modelLeftTopDiv = $(eval(model + "LeftTop"));
			   							$modelLeftBottomDiv = $(eval(model + "LeftBottom"));
			   							$modelCenterDiv = $(eval(model + "Center"));
			   							$modelRightTopDiv = $(eval(model + "RightTop"));
			   							$modelRightBottomDiv = $(eval(model + "RightBottom"));
			   						}
			   						catch (err) {
			   							$modelHeaderDiv = [];
			   							$modelHeaderLeftDiv = [];
			   							$modelHeaderRightDiv = [];
			   							$modelLeftTopDiv = [];
			   							$modelLeftBottomDiv = [];
			   							$modelCenterDiv = [];
			   							$modelRightTopDiv = [];
			   							$modelRightBottomDiv = [];
			   						}
			   						if ($modelCenterDiv.length) {
			   							
			   							if (modelType === 'bull') {
			   								$modelHeaderDiv.css({"color":"green"});
			   							}
			   							else if (modelType === 'bear') {
			   								$modelHeaderDiv.css({"color":"red"});
			   							}
			   							
			   							$modelLeftTopDiv.empty();
			   							$modelLeftBottomDiv.empty();
			   							$modelCenterDiv.empty();
			   							$modelRightTopDiv.empty();
			   							$modelRightBottomDiv.empty();
			   							
			   							if (action === 'Buy') {
				   							$modelCenterDiv.append(
				   								$('<img />').attr({
					   							   	'src': 'images/Buy.png',
					   								'alt': 'Buy', 
					   								'height': '50',
					   								'width': '50'
				   								})
				   							);
				   							$modelCenterDiv.append("<br/>Buy");
				   						}
				   						else if (action === 'Sell') {
				   							$modelCenterDiv.append(
				   								$('<img />').attr({
					   							   	'src': 'images/Sell.png',
					   								'alt': 'Sell', 
					   								'height': '50',
					   								'width': '50'
				   								})
				   							);
				   							$modelCenterDiv.append("<br/>Sell");
				   						}
				   						else if (action === 'Buy Signal') {
				   							$modelCenterDiv.append(
				   								$('<img />').attr({
					   							   	'src': 'images/Buy.png',
					   								'alt': 'Buy', 
					   								'height': '25',
					   								'width': '25'
				   								})
				   							);
				   							$modelCenterDiv.append("<br/>Buy");
				   						}
				   						else if (action === 'Sell Signal') {
				   							$modelCenterDiv.append(
				   								$('<img />').attr({
					   							   	'src': 'images/Sell.png',
					   								'alt': 'Sell', 
					   								'height': '25',
					   								'width': '25'
				   								})
				   							);
				   							$modelCenterDiv.append("<br/>Sell");
				   						}
				   						else if (action === "Waiting" || action === "None") {
				   							var imagePath = "images/None.png";
				   							if (action === "Waiting") {
				   								imagePath = "images/Wait.png";
				   							}
				   							$modelCenterDiv.append(
				   								$('<img />').attr({
					   							   	'src': imagePath,
					   								'alt': 'Wait', 
					   								'height': '50',
					   								'width': '50'
				   								})
				   							);
				 
				   						}
			   							
				   						$modelCenterDiv.append("<br/>Waiting " + secondsRemaining + "s");
			   							
			   							var primaryCheckPath = "images/Check.png";
			   							if (tradeOffPrimary === "false") {
			   								primaryCheckPath = "images/XCheck.png";
			   							}
			   							var oppositeCheckPath = "images/Check.png";
			   							if (tradeOffOpposite === "false") {
			   								oppositeCheckPath = "images/XCheck.png";
			   							}
			   							
			   							$modelHeaderLeftDiv.parent().css({"width":"100%"});
			   							$modelHeaderLeftDiv.text(model);
			   							$modelHeaderRightDiv.text(symbol + " " + duration);
				   						
			   							if (modelType === "bull") {
				   							$modelLeftTopDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BULL&nbsp;");
				   							$modelLeftTopDiv.append(
					   								$('<img />').attr({
						   							   	'src': primaryCheckPath,
						   								'height': '15',
						   								'width': '15'
					   								})
					   							);
				   							$modelLeftTopDiv.append("<br/><br/>&nbsp;&nbsp;Win: " + testWinPercentage + "%");
					   						$modelLeftTopDiv.append("<br/>&nbsp;&nbsp;EAR: " + testEstimatedAverageReturn + "%");
					   						$modelLeftTopDiv.append("<br/>&nbsp;&nbsp;RP: " + testReturnPower);
					   						$modelLeftBottomDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last Action");
					   						if (lastAction === "Buy") {
						   						$modelLeftBottomDiv.append("<br/>Time: " + lastActionTime);
						   						$modelLeftBottomDiv.append("<br/>Open: " + lastActionPrice);
						   						$modelLeftBottomDiv.append("<br/>Close: " + lastTargetClose);
						   						$modelLeftBottomDiv.append("<br/>Stop: " + lastStopClose);
				   							}
					   						
					   						$modelRightTopDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEAR&nbsp;");
					   						$modelRightTopDiv.append(
					   								$('<img />').attr({
						   							   	'src': oppositeCheckPath,
						   								'height': '15',
						   								'width': '15'
					   								})
					   							);
					   						$modelRightTopDiv.append("<br/><br/>&nbsp;&nbsp;&nbsp;Win: " + testOppositeWinPercentage + "%");
					   						$modelRightTopDiv.append("<br/>&nbsp;&nbsp;&nbsp;EAR: " + testOppositeEstimatedAverageReturn + "%");
					   						$modelRightTopDiv.append("<br/>&nbsp;&nbsp;&nbsp;RP: " + testOppositeReturnPower);
					   						$modelRightBottomDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last Action");
					   						if (lastAction === "Sell") {
						   						$modelRightBottomDiv.append("<br/>Time: " + lastActionTime);
						   						$modelRightBottomDiv.append("<br/>Open: " + lastActionPrice);
						   						$modelRightBottomDiv.append("<br/>Close: " + lastTargetClose);
						   						$modelRightBottomDiv.append("<br/>Stop: " + lastStopClose);
				   							}
			   							}
			   							else if (modelType === "bear") {
			   								$modelLeftTopDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BULL&nbsp;");
			   								$modelLeftTopDiv.append(
					   								$('<img />').attr({
						   							   	'src': oppositeCheckPath,
						   								'height': '15',
						   								'width': '15'
					   								})
					   							);
				   							$modelLeftTopDiv.append("<br/><br/>&nbsp;&nbsp;Win: " + testOppositeWinPercentage + "%");
					   						$modelLeftTopDiv.append("<br/>&nbsp;&nbsp;EAR: " + testOppositeEstimatedAverageReturn + "%");
					   						$modelLeftTopDiv.append("<br/>&nbsp;&nbsp;RP: " + testOppositeReturnPower);
					   						$modelLeftBottomDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last Action");
					   						if (lastAction === "Buy") {
						   						$modelLeftBottomDiv.append("<br/>Time: " + lastActionTime);
						   						$modelLeftBottomDiv.append("<br/>Open: " + lastActionPrice);
						   						$modelLeftBottomDiv.append("<br/>Close: " + lastTargetClose);
						   						$modelLeftBottomDiv.append("<br/>Stop: " + lastStopClose);
				   							}
					   						
					   						$modelRightTopDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BEAR&nbsp;");
					   						$modelRightTopDiv.append(
					   								$('<img />').attr({
						   							   	'src': primaryCheckPath,
						   								'height': '15',
						   								'width': '15'
					   								})
					   							);
					   						$modelRightTopDiv.append("<br/><br/>&nbsp;&nbsp;&nbsp;Win: " + testWinPercentage + "%");
					   						$modelRightTopDiv.append("<br/>&nbsp;&nbsp;&nbsp;EAR: " + testEstimatedAverageReturn + "%");
					   						$modelRightTopDiv.append("<br/>&nbsp;&nbsp;&nbsp;RP: " + testReturnPower);
					   						$modelRightBottomDiv.append("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Last Action");
					   						if (lastAction === "Sell") {
						   						$modelRightBottomDiv.append("<br/>Time: " + lastActionTime);
						   						$modelRightBottomDiv.append("<br/>Open: " + lastActionPrice);
						   						$modelRightBottomDiv.append("<br/>Close: " + lastTargetClose);
						   						$modelRightBottomDiv.append("<br/>Stop: " + lastStopClose);
				   							}
			   							}
				   						
				   						$modelCenterDiv.append("<br/>Delay: " + priceDelay + "s");
				   						$modelCenterDiv.append("<br/><br/>Ticker: " + price);
				   						
				   						
			   						}
			   					}
		    				}
		    			}
		   				
		    		},
		    		complete: function (data) {
						setTimeout(pollForStatus, interval);    			
		    		}
		    	});
			}
		    pollForStatus();
	
		 	// jqxbuttonClearStatus   
			$("#jqxbuttonClearStatus").jqxButton({ width: '200'});
		    $("#jqxbuttonClearStatus").on('click', function () {
		    	$("#jqxpanelStatus").jqxPanel('clearcontent');
	        });
		    
		    // jqxdocking
		 	$("#jqxdocking").jqxDocking({ orientation: 'horizontal', windowsOffset: 3, width: 1040, mode: 'docked' });
		    var numDocks = 0;
		});
		
		// Weirdo functions that help things
		if (typeof String.prototype.startsWith != 'function') {
	  		String.prototype.startsWith = function (str) {
	  			return this.indexOf(str) === 0;
		  	};
		}
		
		Object.size = function(obj) {
		    var size = 0, key;
		    for (key in obj) {
		        if (obj.hasOwnProperty(key)) size++;
		    }
		    return size;
		};
	</script>

</body>
</html>