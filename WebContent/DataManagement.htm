<!DOCTYPE html>
<html>
	<link rel="stylesheet" href="styles/jqx.base.css" type="text/css" />
	<style type="text/css">
        .yellow
        {
            background-color: #FFFF99;
        }
    </style>
	<script src="js/jquery-2.1.4.min.js"></script>
	<script src="js/jqx/jqxcore.js"></script>
	<script src="js/jqx/jqxbuttons.js"></script>
	<script src="js/jqx/jqxmenu.js"></script>
	<script src="js/jqx/jqxlistbox.js"></script>
	<script src="js/jqx/jqxdropdownlist.js"></script>
	<script src="js/jqx/jqxgrid.js"></script>
	<script src="js/jqx/jqxgrid.columnsreorder.js"></script>
	<script src="js/jqx/jqxgrid.columnsresize.js"></script>
	<script src="js/jqx/jqxgrid.filter.js"></script>
	<script src="js/jqx/jqxgrid.pager.js"></script>
	<script src="js/jqx/jqxgrid.selection.js"></script>
	<script src="js/jqx/jqxgrid.sort.js"></script>
	<script src="js/jqx/jqxdata.js"></script>
	<script src="js/jqx/jqxscrollbar.js"></script>
	<script src="js/jqx/jqxcheckbox.js"></script>
	<script src="js/jqx/jqxinput.js"></script>
	<script src="js/jqx/jqxpanel.js"></script>
<head>
	<meta charset="ISO-8859-1">
	<title>CSCSP Data Management</title>
</head>
<body>
	&nbsp;<a href="http://localhost:8080/CSCSPMonitor/">Home</a>
	<br/>
	<table>
		<tr>
			<td colspan=7>
				<div id="jqxgrid"></div>
			</td>
		</tr>
		<tr>
			<td>
				<input id="jqxbuttonSearch" type="button" value="Refresh Grid" />
			</td>
			<td>
				<input id="jqxbuttonClearStatus" type="button" value="Clear Status Window" />
			</td>
			<td width=174></td>
			<td align="right">
				<input id="jqxbuttonCreateBars" type="button" value="Create Bars" />
			</td>
			<td align="right">
				<input id="jqxbuttonBitcoinChartsDownloader" type="button" value="BitcoinCharts Downloader" />
			</td>
			<td align="left">
				<input id="jqxbuttonRealtimeDownloader" type="button" value="Realtime Downloader" />
			</td>
			<td align="right">
				<input id="jqxbuttonUpdateMetrics" type="button" value="Update Metrics" />
			</td>
		</tr>
		<tr>
			<td colspan=5>
				<div id="jqxpanelStatus" style=" font-size: 13px; font-family: Verdana;"></div>
			</td>
			<td valign="top">
				<div id='jqxcheckboxIncludeMetrics'>
                	<span>Include metrics</span>
                </div>
                <div id="jqxlistboxBars"></div>
                <br/>
                <div id="jqxlistboxSymbols"></div>
			</td>
			<td valign="top">
				<div id="jqxlistboxMetrics"></div>
			</td>
		<tr>
	</table>
	
	<script>
		$(document).ready(function () {
		    // jqxgrid
			var source =
		    {
				datatype: "json",
		    	method: "POST",	        
		        url: "DataServlet"
		    };
		    
		    var dataAdapter = new $.jqx.dataAdapter(source, {
		    	autoBind: true,
		    	formatData: function (data) {
		    		return data;
		    	},
		    	downloadComplete: function (data) {
		    		var columns = data[0].columns;
		    		var rows = data[1].rows;
		    		
		    		for (var a = 0; a < columns.length; a++) {
		    			columns[a]["cellsrenderer"] = cellsrenderer;
		    			columns[a]["cellclassname"] = cellclassname;
		    		}
		    		
		    		var gridAdapter = new $.jqx.dataAdapter({
		    			id: "id",
		    			localdata: rows
		    		});
		    		$("#jqxgrid").jqxGrid('hideloadelement');
		    		$("#jqxgrid").jqxGrid('beginupdate', true);
		    		$("#jqxgrid").jqxGrid({
		    			source: gridAdapter,
		    			columns: columns,
		    		});
		    		$("#jqxgrid").jqxGrid('endupdate');
		    	}
		    });
		    
		    var cellsrenderer = function (row, columnfield, value, defaulthtml, columnproperties, rowdata) {
		    }
		    
		    var bcdRunning = false;
		    var metricsRunning = false;
		    var realtimeRunning = false;
	        var cellclassname = function (row, columnfield, value) {
	        	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
		    	for (var a = 0; a < gridRowIndexes.length; a++) {
		    		if (row === gridRowIndexes[a]) {
		                if (bcdRunning == true) {
		                    return "yellow";
		                }
		                if (metricsRunning == true) {
		                	return "yellow";	
		                }
		    		}
	            }
	        }
	
		    
		    $("#jqxgrid").jqxGrid(
		    {
		    	source: dataAdapter,
		        width: 1400,
		        altrows: true,
		        autoheight: true,
		        selectionmode: 'checkbox',
		        columnsresize: true,
		        rowsheight: 20,
		        pageable: true,
		        pagesizeoptions: ['20', '50', '100'],
		        pagesize: 20,
		        sortable: true
		    });
		    $("#jqxgrid").jqxGrid('showloadelement');
		    
		    // Events
		    $("#jqxgrid").on('bindingcomplete', function (event) {
		    	$("#jqxgrid").jqxGrid('hideloadelement');
		    })
		    
			// jqxbuttonSearch   
			$("#jqxbuttonSearch").jqxButton({ width: '200'});
		    $("#jqxbuttonSearch").on('click', function () {
		    	dataAdapter.dataBind();
		    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	$("#jqxgrid").jqxGrid('showloadelement');
	        });
		    
		 	// jqxbuttonClearStatus   
			$("#jqxbuttonClearStatus").jqxButton({ width: '200'});
		    $("#jqxbuttonClearStatus").on('click', function () {
		    	$("#jqxpanelStatus").jqxPanel('clearcontent');
	        });
	
		 	// jqxbuttonCreateBars   
			$("#jqxbuttonCreateBars").jqxToggleButton({ width: '200'});
		    $("#jqxbuttonCreateBars").on('click', function () {
		    	var symbols = [];
		    	var durations = [];
		    	
		    	var selectedSymbols = $("#jqxlistboxSymbols").jqxListBox('getSelectedItems'); 
		    	for (var a = 0; a < selectedSymbols.length; a++) {
		    		symbols[a] = selectedSymbols[a].value;
		    	}
		    	
		    	var selectedDurations = $("#jqxlistboxBars").jqxListBox('getSelectedItems'); 
		    	for (var a = 0; a < selectedDurations.length; a++) {
		    		durations[a] = selectedDurations[a].value;
		    	}
		    	
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'BarCreatorServlet',
		    		method: 'POST',
		    		data: {
		    			symbols : symbols,
		    			durations : durations
		    		},
		    		success: function (data) {
		    			$('#jqxbuttonCreateBars').jqxToggleButton('toggle'); 
		    			dataAdapter.dataBind();
		    	    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	    	$("#jqxgrid").jqxGrid('showloadelement');
		    	    	$("#jqxgrid").jqxGrid("clearselection");
		    		}
		    	});
	        });
		    
		 	// jqxbuttonBitcoinChartsDownloader   
			$("#jqxbuttonBitcoinChartsDownloader").jqxToggleButton({ width: '200'});
		    $("#jqxbuttonBitcoinChartsDownloader").on('click', function () {
		    	bcdRunning = true;
		    	var archiveSymbols = [];
		    	var archiveDurations = [];
		    	
		    	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
		    	for (var a = 0; a < gridRowIndexes.length; a++) {
		    		var rowData = $("#jqxgrid").jqxGrid('getrowdata', gridRowIndexes[a]);
		    		archiveSymbols[a] = rowData.symbol;
		    		archiveDurations[a] = rowData.duration;
		    	}
		    	
		    	$("#jqxgrid").jqxGrid("refresh"); // Updates the color
		    	
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'BitcoinChartsServlet',
		    		method: 'POST',
		    		data: {
		    			archiveSymbols : archiveSymbols,
		    			archiveDurations : archiveDurations
		    		},
		    		success: function (data) {
		    			$('#jqxbuttonBitcoinChartsDownloader').jqxToggleButton('toggle'); 
		    			dataAdapter.dataBind();
		    			bcdRunning = false;
		    	    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	    	$("#jqxgrid").jqxGrid('showloadelement');
		    	    	$("#jqxgrid").jqxGrid("clearselection");
		    		}
		    	});
	        });
		    
		    // jqxbuttonRealtimeDownloader
		    $("#jqxbuttonRealtimeDownloader").jqxToggleButton({ width: '200'});
		    $("#jqxbuttonRealtimeDownloader").on('click', function () {
		    	var symbols = [];
		    	var durations = [];
		    	var metrics = [];
		    	var includeMetrics = $('#jqxcheckboxIncludeMetrics').jqxCheckBox('checked'); 
		    	
		    	var selectedMetrics = $("#jqxlistboxMetrics").jqxListBox('getSelectedItems'); 
		    	for (var a = 0; a < selectedMetrics.length; a++) {
		    		metrics[a] = selectedMetrics[a].value;
		    	}
		    	
		    	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
		    	for (var a = 0; a < gridRowIndexes.length; a++) {
		    		var rowData = $("#jqxgrid").jqxGrid('getrowdata', gridRowIndexes[a]);
		    		symbols[a] = rowData.symbol;
		    		durations[a] = rowData.duration;
		    	}
		    	
		    	$("#jqxgrid").jqxGrid("refresh"); // Updates the color
		    	
		     	realtimeRunning = $("#jqxbuttonRealtimeDownloader").jqxToggleButton('toggled');
	
	    		// Start or Stop Realtime Downloads (check the run parameter)
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'RealtimeDownloaderServlet',
		    		method: 'POST',
		    		data: {
		    			symbols : symbols,
		    			durations : durations,
		    			metrics : metrics,
		    			includeMetrics : includeMetrics,
		    			run : realtimeRunning
		    		},
		    		success: function (data) {
		    			if (data["exitReason"] == "cancelled") {
		    				dataAdapter.dataBind();
			    			realtimeRunning = false;
			    	    	$("#jqxgrid").jqxGrid('updatebounddata');
			    	    	$("#jqxgrid").jqxGrid('showloadelement');
			    	    	$("#jqxgrid").jqxGrid("clearselection");
		    			}
		    		}
		    	});
		    	
		    });
		    
		    // jqxbuttonUpdateMetrics
		    $("#jqxbuttonUpdateMetrics").jqxToggleButton({ width: '200'});
		    $("#jqxbuttonUpdateMetrics").on('click', function () {
		    	metricsRunning = true;
		    	var symbols = [];
		    	var durations = [];
		    	var metrics = [];
		    	
		    	var selectedMetrics = $("#jqxlistboxMetrics").jqxListBox('getSelectedItems'); 
		    	for (var a = 0; a < selectedMetrics.length; a++) {
		    		metrics[a] = selectedMetrics[a].value;
		    	}
		    	
		    	var gridRowIndexes = $("#jqxgrid").jqxGrid('getselectedrowindexes');
		    	for (var a = 0; a < gridRowIndexes.length; a++) {
		    		var rowData = $("#jqxgrid").jqxGrid('getrowdata', gridRowIndexes[a]);
		    		symbols[a] = rowData.symbol;
		    		durations[a] = rowData.duration;
		    	}
		    	
		    	$("#jqxgrid").jqxGrid("refresh"); // Updates the color
		    	
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'MetricsUpdaterServlet',
		    		method: 'POST',
		    		data: {
		    			symbols : symbols,
		    			durations : durations,
		    			metrics : metrics
		    		},
		    		success: function (data) {
		    			$('#jqxbuttonUpdateMetrics').jqxToggleButton('toggle'); 
		    			dataAdapter.dataBind();
		    			metricsRunning = false;
		    	    	$("#jqxgrid").jqxGrid('updatebounddata');
		    	    	$("#jqxgrid").jqxGrid('showloadelement');
		    	    	$("#jqxgrid").jqxGrid("clearselection");
		    		}
		    	});
		    });
		    
		    // jqxpanelStatus
		    $("#jqxpanelStatus").jqxPanel({ width: 992, height: 400});
		    
		    // Start polling for status
		    var interval = 1000;
		    var polling = false;
		    function pollForStatus() {
			    polling = true;
		    	$.ajax({
		    		dataType: 'json',
		    		url: 'StatusServlet',
		    		method: 'POST',
		    		data: {
		    			type : 'data'
		    		},
		    		success: function (data) {
		   				for (var a = 0; a < data.length; a++) {
		   					var date = new Date();
		   					$("#jqxpanelStatus").jqxPanel('prepend', date.toLocaleTimeString() + " - " + data[a] + "<br/>");
		   				}
		   				
		    			
		    		},
		    		complete: function (data) {
						setTimeout(pollForStatus, interval);    			
		    		}
		    	});
			}
		    pollForStatus();
		    
		 	// jqxcheckboxIncludeMetrics
		    $("#jqxcheckboxIncludeMetrics").jqxCheckBox({ width: 200, height: 20, checked: false});
		    
		    // jqxlistboxMetrics
		    function getListOfMetrics(callback) {
		    	return $.ajax({
		    		dataType: 'json',
		    		url: 'MetricListServlet',
		    		method: 'POST',
		    		cache: false
		    	}).done(callback);
		    }
		    $("#jqxlistboxMetrics").jqxListBox({ multiple: true, multipleextended: true,  width: 198, height: 400});
		    $("#jqxlistboxMetrics").jqxListBox({itemHeight: 16});	
		    getListOfMetrics(function(data) {
				$("#jqxlistboxMetrics").jqxListBox({source: data});
			});
		    
		    // jqxlistboxBars
		    function getListOfBars(callback) {
		    	return $.ajax({
		    		dataType: 'json',
		    		url: 'BarListServlet',
		    		method: 'POST',
		    		cache: false
		    	}).done(callback);
		    }
		    $("#jqxlistboxBars").jqxListBox({ multiple: true, multipleextended: true,  width: 198, height: 210});
		    $("#jqxlistboxBars").jqxListBox({itemHeight: 16});	
		    getListOfBars(function(data) {
				$("#jqxlistboxBars").jqxListBox({source: data});
			});
		    
		 	// jqxlistboxSymbols
		    function getListOfSymbols(callback) {
		    	return $.ajax({
		    		dataType: 'json',
		    		url: 'SymbolListServlet',
		    		method: 'POST',
		    		cache: false
		    	}).done(callback);
		    }
		    $("#jqxlistboxSymbols").jqxListBox({ multiple: true, multipleextended: true,  width: 198, height: 150});
		    $("#jqxlistboxSymbols").jqxListBox({itemHeight: 16});	
		    getListOfSymbols(function(data) {
				$("#jqxlistboxSymbols").jqxListBox({source: data});
			});
		    
		});
	
	</script>

</body>
</html>